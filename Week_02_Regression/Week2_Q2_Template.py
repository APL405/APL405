# -*- coding: utf-8 -*-
"""Week2_Template_MR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19c071SEqn52aV_YrSumTCsa2sY1Hnt-M

# Mulitvariate Regression Problem
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

# %matplotlib inline

class mr:

  # Evaluates the gradient of cost function (J). Hint: You can use this to optimize w
  def grad(self,x,y,w):
    grad_J = # Your code
    return grad_J

  # This function calculates the cost (J)
  def computeCost(self,x,y,w):
    J = 0    # J is cost function
    # write your code to calculate J
    return J
  
  # This function optimizes the weights w_0, w_1, w_2. Batch Gradient Descent method
  def bgdMulti(self, x, y, w, alpha, iters):
    m =    # number of training examples
    w = w.copy() # To keep a copy of original weights
    
    J_history = []   # Use a python list to save cost in every iteration

    for i in range(iters):
      # Loop to update weights (w vector)
      # Also save cost at every step

    return w, J_history
  
  # Estimate the price of a 4 bedrooms, 2.5 bathrooms, 2570 sq. feet area, 2 floors, 2005 yr. built
  # You need to rescale all the values, mu is mean of all X data of each column, sigma is standard deviation of X data. mu , sigma will be vector
  # You need to do feature normalization of all X (see lab notes)
  def predict(self, mu, sigma):
    price =  # predict the price of the house
    
    return price